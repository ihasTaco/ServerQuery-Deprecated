import matplotlib.pyplot as plt
import datetime
from matplotlib.ticker import MaxNLocator
import json
import numpy as np
import logging

def calculate_hourly_averages(player_data):
    # This function calculates hourly averages for player data
    num_labels = len(player_data)
    hourly_averages = [sum(player_data[:i+1]) / len(player_data[:i+1]) for i in range(num_labels)]
    return hourly_averages

def generate_time_labels(current_time, interval, num_labels):
    # This function generates a list of time labels to be used on the x-axis of the plot
    time_labels = []
    for i in range(num_labels):
        if i % 24 == 0:
            # Add a label for every 24th time point in the range
            time_labels.append((current_time - interval * (num_labels - i - 1)).strftime("%I %p"))
    return time_labels

def set_plot_limits(players, hourly_averages):
    # This function sets the limits for the y-axis of the plot based on the player data and hourly averages
    max_value = max(max(players), max(hourly_averages)) + 1
    y_upper_limit = max_value + max_value/2 # Add half of the max value to the upper limit
    plt.ylim([0, y_upper_limit])

def set_plot_labels(time, time_labels):
    # This function sets the labels for the x-axis of the plot
    plt.xticks(time[::24], time_labels[::1], rotation=45)

def set_plot_style(label_color, tick_color, grid_color):
    # This function sets the style and formatting options for the plot
    ax = plt.gca()
    ax.yaxis.set_major_locator(MaxNLocator(integer=True))
    ax.grid(True, alpha=0.125, color=grid_color)
    ax.yaxis.label.set_color(label_color)
    ax.xaxis.label.set_color(label_color)
    ax.tick_params(axis='both', colors=tick_color)
    plt.xlabel('X Label', color=label_color)
    plt.ylabel('Y Label', color=label_color)
    plt.title('Title', color='#999999')

def plot_player_data(label_color = '#999999', tick_color = '#999999', op_line_color = '#999999', op_fill_color = '#999999', trend_line_color = '#999999', grid_color = '#999999'):

    # Set up time range for x-axis
    current_time = datetime.datetime.now()
    interval = datetime.timedelta(minutes=5)
    num_labels = 288 # 5 minutes * 288 = 24 hours
    time = [i for i in range(num_labels)]

    test_player_data = (5, 8, 4, 4, 0, 4, 2, 4, 4, 8, 13, 16, 20, 25, 21, 25, 23, 26, 25, 28, 30, 26, 29, 32, 35, 40, 35, 37, 33, 28, 30, 26, 29, 25, 24, 21, 25, 30, 32, 34, 32, 37, 38, 37, 37, 38, 36, 35, 33, 33, 28, 31, 33, 37, 41, 43, 38, 43, 47, 47, 43, 48, 46, 45, 48, 53, 51, 56, 61, 58, 60, 62, 60, 61, 64, 59, 60, 64, 63, 60, 61, 62, 67, 70, 66, 61, 60, 58, 59, 63, 61, 59, 57, 59, 64, 63, 67, 71, 73, 72, 75, 78, 77, 72, 75, 76, 76, 75, 71, 68, 63, 64, 61, 58, 62, 62, 65, 70, 72, 75, 77, 79, 82, 78, 75, 76, 72, 68, 69, 74, 78, 82, 78, 83, 86, 88, 87, 82, 87, 90, 90, 85, 83, 87, 91, 88, 89, 91, 93, 93, 97, 98, 100, 100, 100, 95, 90, 86, 85, 84, 89, 85, 90, 93, 96, 91, 90, 93, 92, 87, 90, 93, 93, 88, 86, 83, 81, 76, 72, 73, 78, 77, 73, 78, 74, 77, 81, 76, 76, 74, 69, 66, 67, 69, 72, 76, 79, 80, 80, 78, 80, 85, 88, 84, 89, 87, 86, 86, 83, 87, 83, 87, 87, 85, 80, 75, 80, 85, 84, 84, 88, 88, 93, 96, 97, 94, 94, 93, 93, 90, 95, 93, 92, 93, 94, 99, 98, 100, 100, 100, 96, 100, 100, 99, 98, 99, 97, 93, 89, 92, 90, 88, 92, 91, 87, 83, 81, 85, 82, 77, 82, 84, 89, 88, 93, 91, 91, 89, 94, 94, 99, 99, 100, 100, 95, 92, 96, 94, 90, 90, 90, 90, 90, 90, 85, 81, 81, 79, 75, 74, 75, 76, 72, 68, 72, 73, 78, 81, 83, 85, 83, 83, 78, 83, 82, 78, 80, 76, 79, 75, 79, 82, 79, 76, 80, 78, 74, 70, 67, 65, 68, 70, 69, 68, 63, 67, 64, 68, 68, 65, 63, 59, 58, 62, 64, 60, 61, 65, 69, 64, 64, 65, 61, 61, 59, 57, 57, 53, 52, 52, 52, 47, 45, 45, 48, 50, 45, 47, 45, 42, 41, 43, 38, 40, 40, 35, 30, 35, 39, 40, 40, 45, 45, 50, 52, 56, 57, 62, 57, 52, 52, 55, 57, 55, 52, 54, 52, 54, 59, 62, 60, 61, 58, 56, 61, 63, 63, 59, 62, 59, 61, 56, 59, 63, 63, 67, 70, 72, 75, 75, 79, 80, 81, 85, 86, 84, 81, 77, 82, 87, 86, 91, 93, 92, 92, 96, 97, 100, 100, 100, 98, 98, 94, 96, 100, 100, 97, 97, 92, 93, 90, 85, 80, 75, 78, 76, 72, 70, 74, 72, 70, 71, 67, 62, 61, 66, 69, 74, 76, 75, 72, 69, 70, 66, 64, 61, 66, 65, 70, 72, 75, 72, 68, 72, 71, 69, 65, 68, 63, 58, 57, 62, 63, 63, 66, 68, 66, 64, 62, 63, 67, 70, 71, 73, 74, 77, 78, 75, 73, 78, 77, 82, 86, 81, 81, 80, 85, 90, 90, 95, 96, 92, 97, 97, 94, 99, 95, 96, 100, 98, 97, 95, 100, 100, 100, 98, 99, 98, 100, 99, 100, 100, 97, 96, 99, 97, 97, 99, 95, 96, 97, 94, 95, 98, 96, 100, 100, 100, 98, 100, 100, 100, 97, 100, 100, 97, 100, 100, 99, 98, 99, 100, 100, 100, 100, 97, 93, 93, 88, 91, 94, 91, 88, 88, 92, 94, 97, 96, 97, 98, 95, 92, 93, 95, 92, 95, 92, 87, 92, 94, 93, 94, 95, 96, 96, 98, 99, 100, 96, 100, 100, 96, 98, 98, 100, 100, 95, 98, 97, 95, 91, 95, 96, 95, 99, 100, 98, 96, 100, 95, 91, 89, 90, 90, 91, 91, 90, 95, 90, 95, 93, 92, 93, 96, 95, 98, 97, 97, 96, 94, 92, 90, 88, 87, 83, 82, 77, 80, 79, 78, 80, 81, 80, 84, 85, 85, 87, 86, 86, 89, 93, 92, 93, 95, 90, 85, 82, 84, 81, 76, 74, 70, 68, 71, 73, 77, 72, 74, 69, 71, 72, 73, 76, 72, 74, 79, 78, 75, 73, 69, 67, 71, 67, 64, 64, 66, 61, 59, 63, 62, 67, 68, 72, 71, 75, 71, 68, 68, 73, 68, 67, 65, 63, 68, 71, 73, 72, 71, 74, 78, 75, 74, 72, 76, 74, 79, 84, 81, 80, 80, 77, 76, 76, 74, 77, 74, 77, 76, 71, 75, 74, 75, 77, 79, 74, 74, 70, 71, 74, 76, 74, 72, 77, 77, 80, 78, 78, 83, 81, 77, 74, 77, 76, 75, 70, 69, 70, 71, 76, 71, 75, 72, 76, 79, 84, 81, 82, 77, 78, 81, 83, 86, 90, 89, 92, 87, 92, 87, 90, 85, 90, 95, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 98, 97, 93, 94, 96, 100, 100, 99, 100, 100, 100, 100, 100, 98, 95, 95, 95, 90, 93, 91, 91, 87, 92, 87, 83, 87, 83, 81, 80, 78, 80, 85, 80, 83, 87, 83, 88, 90, 95, 92, 97, 100, 99, 100, 100, 96, 98, 95, 93, 96, 93, 95, 93, 88, 87, 82, 80, 82, 87, 82, 81, 78, 80, 75, 75, 79, 74, 74, 69, 66, 61, 61, 59, 58, 58, 62, 66, 65, 69, 64, 62, 64, 63, 61, 61, 58, 53, 54, 50, 47, 42, 39, 34, 38, 43, 41, 36, 36, 36, 36, 34, 31, 27, 22, 21, 19, 24, 28, 24, 24, 20, 21, 18, 15, 19, 23, 23, 28, 31, 36, 41, 36, 39, 44, 48, 43, 38, 42, 41, 38, 38, 42, 46, 49, 47, 43, 42, 40, 37, 37, 39, 39, 40, 40, 40, 35, 36, 34, 31, 36, 32, 35, 30, 28, 31, 31, 33, 34, 38, 35, 37, 40, 40, 35, 32, 33, 35, 30, 35, 36, 32, 36, 34, 32, 27, 24, 21, 22, 22, 26, 31, 27, 29, 28, 27, 23, 24, 20, 22, 17, 21, 26, 25, 29, 29, 27, 26, 21, 19, 23, 19, 14, 14, 11, 16, 11, 10, 15, 20, 25, 20, 20, 25, 27, 29, 27, 23, 27, 26, 25, 23, 24, 22, 18, 13, 18, 21, 25, 26, 28, 27, 26, 29, 26, 24, 19, 23, 18, 22, 21, 17, 13, 9, 7, 2, 4, 3, 4, 0, 3, 8, 5, 2, 5, 6, 3, 0, 2, 2, 2, 0, 1, 0, 4, 6, 3, 1, 0, 1, 4, 7, 11, 7, 7, 12, 16, 17, 16, 19, 19, 21, 26, 21, 26, 31, 26, 30, 32, 31, 26, 24, 23, 25, 20, 21, 22, 20, 24, 27, 32, 37, 42, 47, 50, 55, 56, 56, 57, 52, 55, 60, 65, 60, 55, 51, 53, 55, 56, 55, 58, 58, 59, 56, 53, 55, 51, 51, 52, 56, 53, 49, 45, 42, 38, 42, 38, 33, 34, 32, 29, 28, 23, 20, 16, 18, 17, 22, 17, 20, 16, 11, 10, 6, 11, 12, 10, 15, 11, 10, 7, 2, 0, 3, 0, 0, 0, 0, 0, 5, 4, 6, 5, 8, 6, 1, 1, 0, 2, 1, 0, 0, 5, 2, 6, 10, 12, 13, 13, 15, 15, 17, 20, 17, 18, 20, 15, 17, 22, 18, 18, 13, 17, 15, 20, 24, 29, 34, 33, 36, 40, 38, 34, 35, 38, 40, 41, 41, 36, 37, 32, 30, 34, 38, 37, 34, 33, 30, 32, 35, 33, 33, 30, 27, 30, 31, 35, 30, 25, 20, 25, 28, 26, 21, 22, 26, 29, 28, 24, 21, 18, 14, 10, 11, 7, 2, 0, 2, 3, 8, 8, 7, 12, 11, 10, 12, 8, 11, 7, 9, 6, 7, 11, 10, 5, 1, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 5, 6, 8, 8, 11, 12, 9, 7, 9, 12, 16, 16, 16, 18, 13, 18, 15, 15, 11, 14, 11, 13, 17, 14, 9, 7, 3, 0, 0, 0, 0, 1, 0, 0, 0, 4, 4, 9, 14, 14, 12, 17, 15, 18, 15, 10, 7, 12, 15, 11, 6, 8, 3, 3, 5, 7, 2, 0, 0, 0, 0, 1, 6, 7, 7, 3, 0, 1, 0, 0, 0, 0, 1, 6, 7, 4, 6, 11, 13, 8, 10, 10, 13, 8, 8, 5, 1, 2, 0, 0, 1, 5, 4, 6, 6, 6, 11, 8, 11, 15, 14, 13, 10, 12, 10, 11, 13, 14, 19, 18, 14, 16, 11, 6, 1, 5, 2, 3, 0, 3, 2, 3, 0, 0, 2, 4, 8, 13, 18, 20, 23, 19, 22, 17, 17, 19, 21, 16, 19, 22, 24, 27, 22, 26, 28, 24, 24, 22, 22, 27, 25, 25, 26, 31, 35, 35, 37, 34, 31, 29, 31, 32, 35, 39, 44, 42, 37, 39, 38, 35, 35, 30, 30, 32, 37, 39, 38, 36, 41, 46, 43, 48, 51, 49, 44, 49, 48, 46, 46, 42, 41, 41, 43, 45, 45, 49, 46, 48, 49, 54, 57, 55, 60, 57, 54, 51, 48, 45, 47, 51, 50, 48, 49, 45, 42, 40, 39, 39, 44, 43, 46, 49, 49, 53, 50, 51, 47, 43, 38, 36, 34, 29, 31, 30, 28, 25, 21, 17, 14, 11, 12, 15, 13, 16, 13, 9, 7, 4, 0, 5, 3, 0, 0, 0, 3, 2, 7, 6, 7, 9, 11, 15, 14, 18, 23, 28, 28, 23, 23, 19, 22, 23, 18, 22, 22, 22, 24, 24, 26, 24, 23, 18, 22, 22, 22, 27, 29, 24, 27, 23, 25, 23, 28, 29, 27, 24, 23, 24, 19, 24, 26, 31, 31, 27, 24, 24, 19, 24, 24, 28, 32, 31, 28, 33, 34, 36, 35, 35, 40, 39, 41, 36, 36, 31, 26, 23, 21, 20, 22, 17, 16, 17, 19, 21, 21, 17, 19, 22, 21, 26, 22, 24, 21, 22, 17, 21, 24, 29, 33, 33, 28, 28, 27, 25, 30, 28, 25, 28, 27, 22, 26, 30, 32, 29, 24, 20, 21, 23, 20, 19, 18, 13, 16, 18, 19, 17, 14, 14, 11, 6, 10, 10, 12, 12, 15, 20, 19, 21, 22, 17, 14, 16, 19, 18, 23, 25, 28, 23, 18, 22, 21, 24, 29, 33, 36, 35, 35, 34, 35, 31, 26, 30, 27, 26, 25, 23, 19, 14, 12, 7, 5, 2, 3, 2, 7, 9, 4, 8, 7, 3, 7, 11, 15, 10, 12, 16, 16, 13, 9, 5, 5, 3, 4, 0, 3, 3, 8, 12, 16, 11, 16, 18, 17, 15, 14, 10, 11, 16, 17, 12, 11, 7, 9, 4, 0, 0, 0, 0, 0, 0, 4, 9, 8, 4, 3, 4, 2, 5, 9, 9, 14, 12, 13, 16, 20, 17, 16, 11, 12, 9, 11, 6, 7, 3, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 4, 5, 6, 5, 3, 5, 5, 2, 6, 7, 7, 9, 4, 2, 1, 0, 0, 5, 6, 9, 5, 10, 6, 5, 3, 3, 0, 0, 2, 0, 3, 2, 0, 0, 0, 0, 0, 3, 3, 3, 5, 6, 3, 4, 2, 7, 10, 7, 7, 9, 4, 3, 0, 0, 0, 0, 0, 0, 4, 5, 1, 1, 6, 5, 8, 5, 2, 2, 5, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 5, 2, 2, 0, 0, 0, 5, 3, 5, 4, 8, 6, 9, 11, 16, 18, 20, 17, 14, 11, 9, 6, 3, 7, 7, 7, 4, 0, 0, 0, 4, 0, 1, 0, 0, 2, 3, 8, 6, 1, 3, 6, 1, 0, 5, 8, 9, 11, 11, 8, 3, 8, 8, 10, 7, 7, 8, 11, 10, 8, 4, 3, 7, 5, 9, 5, 1, 2, 0, 0, 4, 3, 8, 9, 11, 6, 4, 0, 0, 0, 0, 0, 0, 3, 6, 2, 0, 3, 7, 11, 14, 18, 16, 11, 13, 8, 7, 11, 15, 18, 20, 17, 17, 22, 20, 16, 14, 19, 16, 17, 18, 14, 11, 16, 20, 22, 17, 13, 12, 16, 12, 17, 20, 15, 11, 15, 11, 12, 11, 11, 6, 3, 0, 0, 0, 0, 0, 0, 2, 2, 0, 3)

    # Get player count data for the server
    players = test_player_data[-288:] # include only the last 288 elements

    # Calculate hourly averages for trend data
    hourly_averages = calculate_hourly_averages(test_player_data)

    # Generate time labels for x-axis
    time_labels = generate_time_labels(current_time, interval, num_labels)

    # Plot the data and add labels
    plt.plot(time, players, label='Current Players', color=op_line_color)
    
    # Plot the trend data
    trend_time = np.linspace(0, num_labels-1, len(hourly_averages))
    plt.plot(trend_time, hourly_averages, color=trend_line_color, label='Player Trends', linestyle='--')

    # Create legend
    plt.legend(fontsize='medium')

    # Set the y-axis limit based on the maximum value
    set_plot_limits(players, hourly_averages)

    # Add x-axis labels
    set_plot_labels(time, time_labels)

    # Show only whole numbers on the y-axis and set plot style
    set_plot_style(label_color, tick_color, grid_color)

    # Add a shaded area under the plot
    plt.fill_between(time, 0, players, color=op_fill_color, alpha=0.125)

    # Save the plot as an image file
    plt.tight_layout()
    plt.margins(x=0)

    # Show the plot
    plt.show()